@model  TCO.TFM.WDMS.ViewModels.ViewModels.ImgTravelModel

@{
    ViewBag.Title = "Receipt Information";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header card-header-primary card-header-icon">
                <div class="card-text">
                    <h4 class="card-title">Receipt List</h4>
                </div>
            </div>
            <div class="card-body">
                @using (Html.BeginForm("Index", "TravelExpense", FormMethod.Post, new { enctype = "multipart/form-data", @class = "form-horizontal", role = "form" }))
                {
                    @Html.Hidden("opdType", Model.OPDType);
                    @Html.Hidden("OPDEXPENSEID", Model.OPDExpenseID);
                    @Html.AntiForgeryToken()
                    <div class="col-md-12">
                        <div class="form-group bmd-form-group is-filled custom-form-group">
                            @Html.LabelFor(model => model.ExpenseType, "Expense Type", htmlAttributes: new { @class = "bmd-label-static custom-label" })
                            @Html.DropDownListFor(model => model.ExpenseType, new SelectList(Enumerable.Empty<SelectListItem>()))
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.Description, "Description", htmlAttributes: new { @class = "bmd-label-floating" })
                        @Html.EditorFor(m => m.Description, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.Amount, "Amount", htmlAttributes: new { @class = "bmd-label-floating" })
                        @Html.EditorFor(m => m.Amount, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(m => m.Amount, "", new { @class = "text-danger" })
                    </div>
                    <div class="well bs-component">
                        <div class="row">
                            <div class="col-md-8 col-8">
                                <div class="input-group">
                                    <span class="input-group-btn">
                                        <span class="btn btn-default btn-file">
                                            Browse&hellip;
                                            @Html.TextBoxFor(m => m.FileAttach, new { type = "file", placeholder = Html.DisplayNameFor(m => m.FileAttach), @class = "form-control" })
                                        </span>
                                    </span>
                                    <input type="text" class="form-control" readonly>
                                </div>
                                @Html.ValidationMessageFor(m => m.FileAttach, "", new { @class = "text-danger custom-danger" })
                            </div>
                            <div class="col-md-4 col-4">
                                <input type="submit" class="btn btn-fill btn-primary" value="Upload" />
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    @if (Model.ImgLst != null && Model.ImgLst.Count > 0)
    {
        <div class="col-md-12">
            <div class="card">
                <div class="card-header card-header-primary card-header-icon">
                    <div class="card-icon">
                        <i class="material-icons">description</i>
                    </div>
                    <h4 class="card-title">List of Receipts</h4>
                </div>
                <div class="card-body">
                    <div class="material-datatables">

                        <table class="table table-striped table-no-bordered table-hover responsive" cellspacing="0" width="100%" style="width:100%">
                            <thead>
                                <tr>
                                    <th>Sr.</th>
                                    <th>Image Name</th>
                                    <th></th>
                                    <th>Expense Type</th>
                                    <th>Amount</th>
                                    <th>Description</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @for (int i = 0; i < Model.ImgLst.Count; i++)
                                {
                                    <tr>
                                        <td>@(i + 1)</td>

                                        <td>
                                            <div class="input-group">
                                                <i class="fa fa-2x fa-paperclip text-navy pr-1"></i>
                                                <a class="download-file1" href="@Url.Action("DownloadFile", "TravelExpense", new { fileId = @Model.ImgLst[i].ID })" target="_blank">
                                                    @Model.ImgLst[i].ImageName
                                                </a>
                                            </div>
                                        </td>

                                        <td>
                                            @if (@Model.ImgLst[i].ImageExt.Contains("pdf"))
                                            {
                                                <div>
                                                    <img src="~/Images/PdfLogo.png" width="100" height="100" />
                                                </div>
                                            }
                                            else if (@Model.ImgLst[i].ImageExt.Contains("sheet"))
                                            {
                                                <div>
                                                    <img src="~/Images/ExcelLogo.png" width="100" height="100" />
                                                </div>
                                            }
                                            else if (@Model.ImgLst[i].ImageExt.Contains("document"))
                                            {
                                                <div>
                                                    <img src="~/Images/WordLogo.png" width="100" height="100" />
                                                </div>
                                            }
                                            else
                                            {
                                                <div>
                                                    <img src="@Url.Action("DownloadFile", "TravelExpense" , new { fileId=@Model.ImgLst[i].ID })" width="100" height="100" />
                                                </div>
                                            }                                           
                                        </td>

                                        <td>
                                            <div>
                                                @Html.DisplayFor(model => @Model.ImgLst[i].ExpenseType)
                                            </div>
                                        </td>

                                        <td>
                                            <div>
                                                @Html.DisplayFor(model => @Model.ImgLst[i].Amount)
                                            </div>
                                        </td>
                                        <td>
                                            <div>
                                                @Html.DisplayFor(model => @Model.ImgLst[i].Description)
                                            </div>
                                        </td>
                                        <td>
                                            <div>
                                                @{string dumyDeleteID = @Html.DisplayFor(model => @Model.ImgLst[i].ID) + "?opdexpenseid=" + @Html.DisplayFor(model => @Model.ImgLst[i].OpdExpenseId);}
                                                <a href="javascript:;" onclick="md.initShowSwal('warning-message-and-cancel', 'TravelExpense', '@dumyDeleteID')" class="btn btn-link btn-danger btn-just-icon remove"><i class="material-icons">close</i></a>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>

                    </div>
                </div>
            </div>
        </div>
    }


    <div class="col-md-12">
        @Html.ActionLink("Back to Edit", "Edit", "TravelExpense", new { id = @TCO.TFM.WDMS.Common.Utils.Security.EncryptId(Convert.ToInt32(ViewData["OPDEXPENSE_ID"])) }, null)
    </div>

</div>

@section Scripts
{
    @Scripts.Render("~/bundles/bootstrap-file")
    @Styles.Render("~/Content/Bootstrap-file/css")

    <script type="text/javascript">
jQuery(function () {
    var regionsSelect = $('#ExpenseType');
    $.getJSON('@Url.Action("GetExpenseTypes", "Helper")', function (regions) {
        if (regions != null && !jQuery.isEmptyObject(regions)) {
            $.each(regions, function (index, region) {
                regionsSelect.append($("<option></option>").val(this.Value).html(this.Text));
            });
        };
        if (regionsSelect.length != 0) {
            regionsSelect.selectpicker();
        }
    });
});
    </script>
}
